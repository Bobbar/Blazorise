@namespace Blazorise
@using Blazorise.Extensions
@inherits BaseComponent

<div @ref="ElementRef" id="@ElementContainerId" class="b-file-picker">
    <FileEdit @ref="FileEdit" ElementId="@ElementId" Multiple="@Multiple" Placeholder="@Placeholder" Filter="@Filter" MaxChunkSize="@MaxChunkSize" MaxFileSize="@MaxFileSize" SegmentFetchTimeout="@SegmentFetchTimeout"
              Changed="@OnChanged" Started="@OnStarted" Ended="@OnEnded" Written="@Written" Progressed="@OnProgressed" AutoReset="@AutoReset" BrowseButtonLocalizer="@BrowseButtonLocalizer" @attributes="@Attributes">
        <ChildContent>
            @ChildContent
        </ChildContent>
        <Feedback>
            @Feedback
        </Feedback>
    </FileEdit>
    @*TODO : Localization*@
    <Span Class="b-text-drop" Display="Blazorise.Display.Block" TextAlignment="TextAlignment.Center" Margin="Blazorise.Margin.Is2.FromTop">Or drop files here</Span>

    @if (!FileEdit?.Files?.IsNullOrEmpty() ?? false)
    {
        <div Class="b-files-container">
            <ListGroup Class="b-files" Margin="Blazorise.Margin.Is1.FromBottom.Is1.FromTop">

                @foreach (var file in FileEdit.Files)
                {
                    <ListGroupItem @key="file.Id" Class="b-file">

                        @if (FileContent is not null)
                        {
                            @FileContent(new (file, EventCallback.Factory.Create<IFileEntry>(this, RemoveFileAsTask )))
                        }
                        else
                        {
                            @* TODO: FileContent With This Info so user can costumize to his liking *@
                            <CloseButton disabled="@IsBusy()" Clicked="@(async () => await RemoveFile(file))" />
                            <Span Class="b-file-name">@file.Name</Span>
                            <Span Class="b-file-size">@GetFileSizeReadable(file)</Span>
                            @if (IsFileBeingUploaded(file))
                            {
                                <Progress Value="@GetProgressPercentage()" />
                            }
                            else
                            {
                                <Span Class="b-file-status">@GetFileStatus(file)</Span>
                            }
                        }

                    </ListGroupItem>
                }
            </ListGroup>
            @if (ButtonContent is not null)
            {
                @ButtonContent(new ())

            }
            else
            {
                <Buttons Float="Blazorise.Float.End">
                    <Button Color="Color.Info" Class="b-file-clear" Disabled="@IsBusy()" Clicked="Clear">Clear</Button>
                    <Button Color="Color.Primary" Class="b-file-upload" Disabled="@(IsBusy() || !IsUploadReady())" Clicked="UploadAll">Upload</Button>
                </Buttons>
            }
        </div>
    }
</div>

