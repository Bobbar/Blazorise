@namespace Blazorise
@using Blazorise.Extensions
@inherits BaseComponent

<FileEdit @ref="FileEdit" ElementId="@ElementId" Multiple="@Multiple" Placeholder="@Placeholder" Filter="@Filter" MaxChunkSize="@MaxChunkSize" MaxFileSize="@MaxFileSize" SegmentFetchTimeout="@SegmentFetchTimeout"
          Changed="@OnChanged" Started="@OnStarted" Ended="@OnEnded" Written="@Written" Progressed="@OnProgressed" AutoReset="@AutoReset" BrowseButtonLocalizer="@BrowseButtonLocalizer" @attributes="@Attributes">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <Feedback>
        @Feedback
    </Feedback>
</FileEdit>

@if (!FileEdit?.Files?.IsNullOrEmpty() ?? false)
{
    <Div Class="b-file-container">
        <ListGroup Class="b-files" Margin="Blazorise.Margin.Is1.FromBottom.Is1.FromTop">

            @foreach (var file in FileEdit.Files)
            {
                <ListGroupItem @key="file.Id" Class="b-file">

                    @* TODO: FileContent With This Info so user can costumize to his liking *@
                    <CloseButton disabled="@IsBusy()" Clicked="@(async () => await RemoveFile(file))" />
                    <Span Class="b-file-name">@file.Name</Span>
                    <Span Class="b-file-size">@GetFileSizeReadable(file)</Span>
                    @if (IsFileBeingUploaded(file))
                    {
                        <Progress Value="@GetProgressPercentage()" />
                    }
                    else
                    {
                        <Span Class="b-file-status" >@GetFileStatus(file)</Span>
                    }
                </ListGroupItem>
            }
        </ListGroup>
        <Buttons Float="Blazorise.Float.End">
            <Button Color="Color.Info" Class="b-file-clear" Disabled="@IsBusy()" Clicked="Clear">Clear</Button>
            <Button Color="Color.Primary" Class="b-file-upload" Disabled="@IsBusy()" Clicked="UploadAll">Upload</Button>
        </Buttons>
    </Div>
}
