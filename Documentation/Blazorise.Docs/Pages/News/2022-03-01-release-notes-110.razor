@page "/news/release-notes/110"

<Seo Canonical="news/release-notes/110" Title="Blazorise v1.1" Description="Blazorise v1.1" />

<NewsPageTitle>
    Announcing Blazorise 1.1
</NewsPageTitle>

<NewsPagePostInto UserName="Mladen Macanović" ImageName="mladen" PostedOn="March 4st, 2022" Read="7 min" />



<NewsPageSubtitle>
    Blazorise 1.1 Highlights 💡
</NewsPageSubtitle>

<UnorderedList>
    <UnorderedListItem>
        New <Strong>FilePicker</Strong> component.
    </UnorderedListItem>    
    <UnorderedListItem>
        <Strong>FileEdit</Strong> performance improvements to <Code>WriteToStreamAsync</Code> and <Code>OpenReadStreamAsync</Code> APIs
    </UnorderedListItem>
</UnorderedList>

<NewsPageSubtitle>
    Migration 🛠
</NewsPageSubtitle>

<Paragraph>
    Note...
</Paragraph>

<OrderedList>
    <UnorderedListItem>
        ...
    </UnorderedListItem>
</OrderedList>

<NewsPageSubtitle>
    Highlights 🚀
</NewsPageSubtitle>

<Heading Size="HeadingSize.Is3">
    Focus Trap
</Heading>

<Paragraph>
    As a continuous work to improve AODA compatibility we have created a new FocusTrap component. TrapFocus is a component that manages focus for its descendants. This is useful when implementing overlays such as modal dialogs, which should not allow the focus to escape while open.
</Paragraph>

<Paragraph>
    The new component is already part of the <Code>Modal</Code> which can be controlled by setting the <Code>FocusTrap</Code> parameter. If you wish to use new component on its own then you can look at the example on the <Anchor To="docs/components/focus-trap">FocusTrap page</Anchor>.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Highlighter
</Heading>

<Paragraph>
    This is a relatively small component, but it can be beneficial when designing the UI for your application. For example, it helps you visually distinguish parts of the text by highlighting them based on the search term.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    DataGrid
</Heading>

<Paragraph>
    Added <Code>ShowDefaultSortIcon</Code> parameter to <Code>DataGrid</Code>. By enabling this parameter, a default sort icon will now display.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    FileEdit
</Heading>

<Paragraph>
    We've noticed that <Code>WriteToStreamAsync</Code> would not update progress on the UI and also freeze when using this API on WebAssembly. This is an inherit problem to Blazor WebAssembly being single threaded, we've improved on this so the UI should now be able to update while using this API.
</Paragraph>

<Paragraph>
    Added missing <Code>CancellationToken</Code> to <Code>OpenReadStreamAsync</Code>
</Paragraph>

<Paragraph>
    Both <Code>WriteToStreamAsync</Code> and <Code>OpenReadStreamAsync</Code> should now be more performant as we made changes to accomodate the following new features in .NET6
    <Blazorise.Link To="https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript?view=aspnetcore-6.0#byte-array-support">Byte Array Support</Blazorise.Link>
    <Blazorise.Link To="https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript?view=aspnetcore-6.0#stream-from-javascript-to-net">Stream from Javascript Support</Blazorise.Link>
    We now highly advise the usage of the <Code>OpenReadStreamAsync</Code> on Blazor WebAssembly as it is very performant.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    FilePicker
</Heading>

<Paragraph>
   The new <Code>FilePicker</Code> will give you an enhanced File Upload control, with more out of the box options then our <Code>FileEdit</Code> component.
   - Listing, detailing and controlling the look of the selected files.
   - Clear and upload buttons with built in progress bar
</Paragraph>